rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isModerator() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/kullanicilar/$(request.auth.uid)).data.rol in ['moderator','admin'];
    }

    // Fallback: deny by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Kullanıcı profilleri
    match /kullanicilar/{uid} {
      allow read: true; // Profiller herkese açık görüntülenebilir
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && request.auth.uid == uid
        // Kullanıcı kendi rolünü ve uid'sini değiştiremez
        && request.resource.data.rol == resource.data.rol
        && request.resource.data.uid == resource.data.uid;
      allow delete: if false; // Silmeyi kapat (opsiyonel)
    }

    // Kalemler
    match /kalemler/{kalemId} {
      allow read: true;
      allow create: if isSignedIn()
        && request.resource.data.olusturanId == request.auth.uid
        && request.resource.data.baslik is string
        && request.resource.data.baslik.size() > 0
        && request.resource.data.baslik.size() <= 100;
      allow update, delete: if isSignedIn() && resource.data.olusturanId == request.auth.uid;
    }

    // İçerikler
    match /icerikler/{icerikId} {
      allow read: true;
      allow create: if isSignedIn()
        && request.resource.data.olusturanId == request.auth.uid
        && request.resource.data.kalemId is string
        && request.resource.data.tip in ['yazi', 'foto'];
      allow update, delete: if isSignedIn() && resource.data.olusturanId == request.auth.uid;

      // Oylar: tek oy kuralı, user uid doc id olarak
      match /oylar/{uid} {
        allow read: if true;
        // İlk oluşturma: belge yoksa ve kendi uid'si ile yazıyorsa
        allow create: if isSignedIn()
          && request.auth.uid == uid
          && request.resource.data.oy in [1,-1]
          && !exists(/databases/$(database)/documents/icerikler/$(icerikId)/oylar/$(uid));
        // Oy değiştirmeye izin vermek isterseniz:
        allow update: if isSignedIn()
          && request.auth.uid == uid
          && request.resource.data.oy in [1,-1];
        allow delete: if isSignedIn() && request.auth.uid == uid;
      }

      // Yorumlar: sahiplik ve moderasyon
      match /yorumlar/{yorumId} {
        allow read: if true;
        allow create: if isSignedIn()
          && request.resource.data.kullaniciId == request.auth.uid
          && request.resource.data.metin is string
          && request.resource.data.metin.size() >= 1
          && request.resource.data.metin.size() <= 2000;
        allow update: if isSignedIn() && (
            resource.data.kullaniciId == request.auth.uid || isModerator()
        );
        allow delete: if isSignedIn() && (
            resource.data.kullaniciId == request.auth.uid || isModerator()
        );
      }
    }

    // Sohbetler
    match /chats/{chatId} {
      function isParticipant() {
        return isSignedIn() && (
          (resource.data.participants != null && request.auth.uid in resource.data.participants) ||
          (request.resource.data.participants != null && request.auth.uid in request.resource.data.participants)
        );
      }

      allow read: if isParticipant();

      // Chat oluşturma: katılımcı listesinde olmalı
      allow create: if isSignedIn()
        && request.resource.data.participants is list
        && request.auth.uid in request.resource.data.participants;

      // Katılımcılar, sadece unreadCount ve/veya lastOpenedAt alanlarını güncelleyebilir.
      // participants, participantsMeta, createdAt, lastMessage alanları değiştirilemez.
      allow update: if isParticipant()
        && request.resource.data.participants == resource.data.participants
        && request.resource.data.participantsMeta == resource.data.participantsMeta
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.lastMessage == resource.data.lastMessage
        && request.resource.data.keys().hasOnly(['participants','participantsMeta','createdAt','lastMessage','unreadCount','lastOpenedAt']);
      allow delete: if false;

      // Mesajlar alt koleksiyonu
      match /messages/{messageId} {
        allow read: if isParticipant();
        allow create: if isParticipant() && request.resource.data.userId == request.auth.uid;
        allow update: if false; // Mesaj değişikliğini kapat (immutable)
        allow delete: if false;
      }
    }

    // Raporlar (top-level): herkes rapor açabilir, güncellemeyi sadece moderator yapar
    match /raporlar/{raporId} {
      allow read: if isModerator();
      allow create: if isSignedIn()
        && request.resource.data.raporlayanId == request.auth.uid
        && request.resource.data.hedefTip in ['icerik','yorum','kullanici']
        && request.resource.data.hedefPath is string
        && request.resource.data.neden is string
        && request.resource.data.neden.size() >= 3
        && request.resource.data.neden.size() <= 500;
      allow update: if isModerator();
      allow delete: if false;
    }
  }
}